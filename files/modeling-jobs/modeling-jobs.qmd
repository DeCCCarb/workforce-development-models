---
title: "Modeling Jobs"
format: html
warning: false
message: false
editor_options: 
  chunk_output_type: console
---

```{r}
# Load libraries
library(tidyverse)
library(here)
```


# Overview

This document hosts the code for projecting jobs created from expanding:

- Rooftop and Utility Solar (PV)
- Floating Offshore Wind
- Land Based Wind
- Oil Well Capping

The main section in this document is Analysis. Use this to easily test different scenarios by changing variables such as capacity goals or jobs per unit of energy generation. 

The next section is where we wrote the code for creating different plots. 

# Analysis

## PV 

Use the following code to create a table containing direct, indirect, and induced PV jobs in each county

### Define Functions
```{r}
###################### PV O&M Jobs Function ######################
#' Calculate PV Operations and Maintenance jobs and annual capacity
#'
#' @param county Character string. Name of the county.
#' @param start_year Integer. The year that you are starting with. E.g., 2025 for a 2025-2045 analysis.
#' @param end_year Integer. The year you are ending with. E.g., 2045 for a 2025-2045 analysis.
#' @param technology Character string. Name of the technology. E.g., "Utility PV" or "Rooftop PV".
#' @param ambition Character string, either "High" or "Low".
#' @param initial_capacity Numeric. Starting capacity in Megawatts. E.g., 100 for 100MW of solar already installed in 2025.
#' @param final_capacity Numeric. Target capacity in Megawatts. E.g., 500 for 500MW goal in 2045.
#' @param direct_jobs Numeric. JEDI output representing number of direct O&M jobs per MW of solar.
#' @param indirect_jobs Numeric. JEDI output representing number of indirect O&M jobs per MW of solar.
#' @param induced_jobs Numeric. JEDI output representing number of induced O&M jobs per MW of solar.
#'
#' @return Data Frame projecting total O&M jobs each year and energy capacity over designated time period
#'
#' @examples
#' Santa Barbara Utility Solar O&M Jobs from 2025-2045, starting with 111 MW in 2025 and increasing to 722 MW by 2045:
#' sb_utility_pv_om_jobs <- calculate_pv_om_jobs(county = "SB",
#'                                            start_year = 2025,
#'                                            end_year = 2045,
#'                                            technology = "Utility PV",
#'                                            ambition = "High"
#'                                            initial_capacity = 111,
#'                                            final_capacity = 722,
#'                                            direct_jobs = 0.5,
#'                                            indirect_jobs = 0.1,
#'                                            induced_jobs = 0.2)
#' print(sb_utility_pv_om_jobs) 

calculate_pv_om_jobs <- function(county, start_year, end_year, technology, ambition, initial_capacity,
                                 final_capacity, direct_jobs, indirect_jobs, induced_jobs) {
    
    # Calculate the annual growth rate
    growth_rate <- (final_capacity / initial_capacity)^(1 / (end_year - start_year)) - 1
    
    # Create variables to store the results
    year <- start_year:end_year
    capacity <- numeric(length(year))
    new_capacity <- numeric(length(year))
    
    # Calculate the total capacity for each year
    for (i in 1:length(year)) {
        capacity[i] <- initial_capacity * (1 + growth_rate)^(year[i] - start_year)
        if (i == 1) {
            new_capacity[i] <- capacity[i] - initial_capacity
        } else {
            new_capacity[i] <- capacity[i] - capacity[i-1]
        }
    }
    
    # Create a data frame with the results
    df <- data.frame(county = county, 
                     year = year, 
                     technology = technology,
                     ambition = ambition,
                     new_capacity_mw = round(new_capacity, 2),
                     total_capacity_mw = round(capacity, 2),
                     new_capacity_gw = round(new_capacity / 1000, 2),
                     total_capacity_gw = round(capacity / 1000, 2))
    
    # Direct jobs
    df_direct <- df %>%
        mutate(occupation = "O&M", 
               type = "direct", 
               n_jobs = round(total_capacity_mw * direct_jobs, 2))
    
    # Indirect jobs
    df_indirect <- df %>%
        mutate(occupation = "O&M",
               type = "indirect", 
               n_jobs = round(total_capacity_mw * indirect_jobs, 2))
    
    # Induced jobs
    df_induced <- df %>%
        mutate(occupation = "O&M",
               type = "induced", 
               n_jobs = round(total_capacity_mw * induced_jobs, 2))
    
    # Stack them together for total jobs
    df_final <- rbind(df_direct, df_indirect, df_induced)
    
    return(df_final)
}

#################### PV Construction Jobs Function ####################
#' Calculate PV Construction jobs and annual capacity
#'
#' @param county Character string. Name of the county.
#' @param start_year Integer. The year that you are starting with. E.g., 2025 for a 2025-2045 analysis.
#' @param end_year Integer. The year you are ending with. E.g., 2045 for a 2025-2045 analysis.
#' @param technology Character string. Name of the technology. E.g., "Utility PV" or "Rooftop PV".
#' @param ambition Character string, either "High" or "Low".
#' @param initial_capacity Numeric. Starting capacity in Megawatts. E.g., 100 for 100MW of solar already installed in 2025.
#' @param final_capacity Numeric. Target capacity in Megawatts. E.g., 500 for 500MW goal in 2045.
#' @param direct_jobs Numeric. JEDI output representing number of direct construction jobs per MW of solar.
#' @param indirect_jobs Numeric. JEDI output representing number of indirect construction jobs per MW of solar.
#' @param induced_jobs Numeric. JEDI output representing number of induced construction jobs per MW of solar.
#'
#' @return Data Frame projecting total construction jobs each year and energy capacity over designated time period
#'
#' @examples
#' Santa Barbara Utility Solar construction Jobs from 2025-2045, starting with 111 MW in 2025 and increasing to 722 MW by 2045:
#' sb_utility_pv_const_jobs <- calculate_pv_construction_jobs(county = "SB",
#'                                            start_year = 2025,
#'                                            end_year = 2045,
#'                                            technology = "Utility PV",
#'                                            ambition = "High",
#'                                            initial_capacity = 111,
#'                                            final_capacity = 722,
#'                                            direct_jobs = 0.5,
#'                                            indirect_jobs = 0.1,
#'                                            induced_jobs = 0.2)
#' print(sb_utility_pv_const_jobs) 

calculate_pv_construction_jobs <- function(county, start_year, end_year, technology, ambition, initial_capacity, final_capacity, direct_jobs, indirect_jobs, induced_jobs) {
    
    # Calculate the annual growth rate
    growth_rate <- (final_capacity / initial_capacity)^(1 / (end_year - start_year)) - 1
    
    # Create variables to store the results
    year <- start_year:end_year
    capacity <- numeric(length(year))
    new_capacity <- numeric(length(year))
    
    # Calculate the total capacity for each year
    for (i in 1:length(year)) {
        capacity[i] <- initial_capacity * (1 + growth_rate)^(year[i] - start_year)
        if (i == 1) {
            new_capacity[i] <- capacity[i] - initial_capacity
        } else {
            new_capacity[i] <- capacity[i] - capacity[i-1]
        }
    }
    
    # Create a data frame with the results
    df <- data.frame(county = county, 
                     year = year, 
                     technology = technology,
                     ambition = ambition,
                     new_capacity_mw = round(new_capacity, 2),
                     total_capacity_mw = round(capacity, 2),
                     new_capacity_gw = round(new_capacity / 1000, 2),
                     total_capacity_gw = round(capacity / 1000, 2))
    
    # Direct jobs
    df_direct <- df %>%
        mutate(occupation = "Construction", 
               type = "direct", 
               n_jobs = round(new_capacity_mw * direct_jobs, 2))   # Assuming that construction jobs only last the year, jobs/mw year will multiply by the new capacity
    
    # Indirect jobs
    df_indirect <- df %>%
        mutate(occupation = "Construction",
               type = "indirect", 
               n_jobs = round(new_capacity_mw * indirect_jobs, 2))
    
    # Induced jobs
    df_induced <- df %>%
        mutate(occupation = "Construction",
               type = "induced", 
               n_jobs = round(new_capacity_mw * induced_jobs, 2))
    
    # Stack them together for total jobs
    df_final <- rbind(df_direct, df_indirect, df_induced)
    
    return(df_final)
}

```

### Create PV Jobs Data Frame

Use the functions defined above to project solar jobs using JEDI estimates and capacity ambition goals

*Note:* We are modeling solar jobs in two sectors, utility and rooftop solar. JEDI breaks its job estimates for rooftop solar into commercial and residential. We determined that in the rooftop solar industry, commercial is on average 60% of capacity and residential is roughly 40%. When defining direct, induced, and indirect job parameters for rooftop solar, we use the notation jobs = (JEDI residential estimate * 0.4) + (JEDI commercial estimate * 0.6).

```{r}
############################## Santa Barbara PV Jobs ##############################

# High ambition ----
# O&M Utility PV
sb_utility_pv_om <- calculate_pv_om_jobs(
    county = "SB", 
    technology = "Utility PV", 
    ambition = "High",
    start_year = 2025,
    end_year = 2045,
    initial_capacity = 110.8566193, 
    final_capacity = 722.0797068, 
    direct_jobs = 0.2, 
    indirect_jobs = 0, 
    induced_jobs = 0
)

# Construction Utility PV
sb_utility_pv_const <- calculate_pv_construction_jobs(
    county = "SB",
    start_year = 2025,
    end_year = 2045,
    technology = "Utility PV",
    ambition = "High",
    initial_capacity = 110.8566193,
    final_capacity = 722.0797068,
    direct_jobs = 1.6,
    indirect_jobs = 0.6,
    induced_jobs = 0.4
)

# O&M Rooftop PV
sb_roof_pv_om <- calculate_pv_om_jobs(
    county = "SB", 
    start_year = 2025,
    end_year = 2045,
    technology = "Rooftop PV", 
    ambition = "High",
    initial_capacity = 242.0159119, 
    final_capacity = 1293.941196, 
    direct_jobs = ((0.3 * 0.4) + (0.2 * 0.6)), 
    indirect_jobs = 0, 
    induced_jobs = 0
)

# Construction Rooftop PV
sb_roof_pv_const <- calculate_pv_construction_jobs(
    county = "SB",
    start_year = 2025,
    end_year = 2045,
    technology = "Rooftop PV",
    ambition = "High",
    initial_capacity = 242.0159119,
    final_capacity = 1293.941196,
    direct_jobs = ((5.9 * 0.4) + (3.1 * 0.6)),
    indirect_jobs = ((4.7 * 0.4) + (2.9 * 0.6)),
    induced_jobs = ((2.5 * 0.4) + (1.5 * 0.6))
)

# Low ambition ----
# O&M Utility PV
sb_utility_pv_om_low <- calculate_pv_om_jobs(
    county = "SB", 
    technology = "Utility PV", 
    ambition = "Low",
    start_year = 2025,
    end_year = 2045,
    initial_capacity = 110.8566193, 
    final_capacity = 433.2478, 
    direct_jobs = 0.2, 
    indirect_jobs = 0, 
    induced_jobs = 0
)

# Construction Utility PV
sb_utility_pv_const_low <- calculate_pv_construction_jobs(
    county = "SB",
    start_year = 2025,
    end_year = 2045,
    technology = "Utility PV",
    ambition = "Low",
    initial_capacity = 110.8566193,
    final_capacity = 433.2478,
    direct_jobs = 1.6,
    indirect_jobs = 0.6,
    induced_jobs = 0.4
)

# O&M Rooftop PV
sb_roof_pv_om_low <- calculate_pv_om_jobs(
    county = "SB", 
    start_year = 2025,
    end_year = 2045,
    technology = "Rooftop PV", 
    ambition = "Low",
    initial_capacity = 242.0159119, 
    final_capacity = 776.3647, 
    direct_jobs = ((0.3 * 0.4) + (0.2 * 0.6)), 
    indirect_jobs = 0, 
    induced_jobs = 0
)

# Construction Rooftop PV
sb_roof_pv_const_low <- calculate_pv_construction_jobs(
    county = "SB",
    start_year = 2025,
    end_year = 2045,
    technology = "Rooftop PV",
    ambition = "Low",
    initial_capacity = 242.0159119,
    final_capacity = 776.3647,
    direct_jobs = ((5.9 * 0.4) + (3.1 * 0.6)),
    indirect_jobs = ((4.7 * 0.4) + (2.9 * 0.6)),
    induced_jobs = ((2.5 * 0.4) + (1.5 * 0.6))
)



############################## San Luis Obispo PV Jobs ##############################

# High ambition ----
# O&M Utility PV
slo_utility_pv_om <- calculate_pv_om_jobs(
    county = "SLO", 
    start_year = 2025,
    end_year = 2045,
    technology = "Utility PV", 
    ambition = "High",
    initial_capacity = 1615.819209, 
    final_capacity = 10524.85876, 
    direct_jobs = 0.2, 
    indirect_jobs = 0, 
    induced_jobs = 0
)

# Construction Utility PV
slo_utility_pv_const <- calculate_pv_construction_jobs(
    county = "SLO",
    start_year = 2025,
    end_year = 2045,
    technology = "Utility PV",
    ambition = "High",
    initial_capacity = 1615.819209,
    final_capacity = 10524.85876,
    direct_jobs = 1.6,
    indirect_jobs = 0.7,
    induced_jobs = 0.3
)

# O&M Rooftop PV
slo_roof_pv_om <- calculate_pv_om_jobs(
    county = "SLO", 
    start_year = 2025,
    end_year = 2045,
    technology = "Rooftop PV", 
    ambition = "High",
    initial_capacity = 344.8405982, 
    final_capacity = 1843.694708, 
    direct_jobs = ((0.3 * 0.4) + (0.2 * 0.6)), 
    indirect_jobs = 0, 
    induced_jobs = 0
)

# Construction Rooftop PV
slo_roof_pv_const <- calculate_pv_construction_jobs(
    county = "SLO",
    start_year = 2025,
    end_year = 2045,
    technology = "Rooftop PV",
    ambition = "High",
    initial_capacity = 344.8405982,
    final_capacity = 1843.694708,
    direct_jobs = ((6.2 * 0.4) + (3.3 * 0.6)),
    indirect_jobs = ((5.4 * 0.4) + (3.3 * 0.6)),
    induced_jobs = ((2.3 * 0.4) + (1.3 * 0.6))
)

# Low ambition ----
# O&M Utility PV
slo_utility_pv_om_low <- calculate_pv_om_jobs(
    county = "SLO", 
    start_year = 2025,
    end_year = 2045,
    technology = "Utility PV", 
    ambition = "Low",
    initial_capacity = 1615.819209, 
    final_capacity =  6314.915, 
    direct_jobs = 0.2, 
    indirect_jobs = 0, 
    induced_jobs = 0
)

# Construction Utility PV
slo_utility_pv_const_low <- calculate_pv_construction_jobs(
    county = "SLO",
    start_year = 2025,
    end_year = 2045,
    technology = "Utility PV",
    ambition = "Low",
    initial_capacity = 1615.819209,
    final_capacity =  6314.915,
    direct_jobs = 1.6,
    indirect_jobs = 0.7,
    induced_jobs = 0.3
)

# O&M Rooftop PV
slo_roof_pv_om_low <- calculate_pv_om_jobs(
    county = "SLO", 
    start_year = 2025,
    end_year = 2045,
    technology = "Rooftop PV", 
    ambition = "Low",
    initial_capacity = 344.8405982, 
    final_capacity = 1106.217, 
    direct_jobs = ((0.3 * 0.4) + (0.2 * 0.6)), 
    indirect_jobs = 0, 
    induced_jobs = 0
)

# Construction Rooftop PV
slo_roof_pv_const_low <- calculate_pv_construction_jobs(
    county = "SLO",
    start_year = 2025,
    end_year = 2045,
    technology = "Rooftop PV",
    ambition = "Low",
    initial_capacity = 344.8405982,
    final_capacity = 1106.217,
    direct_jobs = ((6.2 * 0.4) + (3.3 * 0.6)),
    indirect_jobs = ((5.4 * 0.4) + (3.3 * 0.6)),
    induced_jobs = ((2.3 * 0.4) + (1.3 * 0.6))
)

############################## Ventura PV Jobs ##############################

# High ambition ----
# O&M Utility PV
ventura_utility_pv_om <- calculate_pv_om_jobs(
    county = "V", 
    start_year = 2025,
    end_year = 2045,
    technology = "Utility PV", 
    ambition = "High",
    initial_capacity = 6.71858299, 
    final_capacity = 43.76240647, 
    direct_jobs = 0.2, 
    indirect_jobs = 0, 
    induced_jobs = 0
)

# Construction Utility PV
ventura_utility_pv_const <- calculate_pv_construction_jobs(
    county = "V",
    start_year = 2025,
    end_year = 2045,
    technology = "Utility PV",
    ambition = "High",
    initial_capacity = 6.71858299, 
    final_capacity = 43.76240647, 
    direct_jobs = 1.6,
    indirect_jobs = 0.6,
    induced_jobs = 0.4
)

# O&M Rooftop PV
ventura_roof_pv_om <- calculate_pv_om_jobs(
    county = "V", 
    start_year = 2025,
    end_year = 2045,
    technology = "Rooftop PV", 
    ambition = "High",
    initial_capacity = 424.1984954, 
    final_capacity = 3026.377541, 
    direct_jobs = ((0.3 * 0.4) + (0.2 * 0.6)), 
    indirect_jobs = 0, 
    induced_jobs = 0
)

# Construction Utility PV
ventura_roof_pv_const <- calculate_pv_construction_jobs(
    county = "V",
    start_year = 2025,
    end_year = 2045,
    technology = "Rooftop PV",
    ambition = "High",
    initial_capacity = 424.1984954,
    final_capacity = 3026.377541,
    direct_jobs = ((6.2 * 0.4) + (3.3 * 0.6)),
    indirect_jobs = ((4.7 * 0.4) + (2.9 * 0.6)),
    induced_jobs = ((2.5 * 0.4) + (1.4 * 0.6))
)

# Low ambition ----
# O&M Utility PV
ventura_utility_pv_om_low <- calculate_pv_om_jobs(
    county = "V", 
    start_year = 2025,
    end_year = 2045,
    technology = "Utility PV", 
    ambition = "Low",
    initial_capacity = 6.71858299, 
    final_capacity = 26.25744, 
    direct_jobs = 0.2, 
    indirect_jobs = 0, 
    induced_jobs = 0
)

# Construction Utility PV
ventura_utility_pv_const_low <- calculate_pv_construction_jobs(
    county = "V",
    start_year = 2025,
    end_year = 2045,
    technology = "Utility PV",
    ambition = "Low",
    initial_capacity = 6.71858299, 
    final_capacity = 26.25744, 
    direct_jobs = 1.6,
    indirect_jobs = 0.6,
    induced_jobs = 0.4
)

# O&M Rooftop PV
ventura_roof_pv_om_low <- calculate_pv_om_jobs(
    county = "V", 
    start_year = 2025,
    end_year = 2045,
    technology = "Rooftop PV", 
    ambition = "Low",
    initial_capacity = 424.1984954, 
    final_capacity = 1815.827, 
    direct_jobs = ((0.3 * 0.4) + (0.2 * 0.6)), 
    indirect_jobs = 0, 
    induced_jobs = 0
)

# Construction Utility PV
ventura_roof_pv_const_low <- calculate_pv_construction_jobs(
    county = "V",
    start_year = 2025,
    end_year = 2045,
    technology = "Rooftop PV",
    ambition = "Low",
    initial_capacity = 424.1984954,
    final_capacity = 1815.827,
    direct_jobs = ((6.2 * 0.4) + (3.3 * 0.6)),
    indirect_jobs = ((4.7 * 0.4) + (2.9 * 0.6)),
    induced_jobs = ((2.5 * 0.4) + (1.4 * 0.6))
)



# Combine all PV projections ----
pv_all <- rbind(sb_utility_pv_om, sb_utility_pv_const, sb_roof_pv_om, sb_roof_pv_const,
                sb_utility_pv_om_low, sb_utility_pv_const_low, sb_roof_pv_om_low, sb_roof_pv_const_low,
                slo_utility_pv_om, slo_utility_pv_const, slo_roof_pv_om, slo_roof_pv_const,
                slo_utility_pv_om_low, slo_utility_pv_const_low, slo_roof_pv_om_low, slo_roof_pv_const_low,
                ventura_utility_pv_om, ventura_utility_pv_const, ventura_roof_pv_om, ventura_roof_pv_const,
                ventura_utility_pv_om_low, ventura_utility_pv_const_low, ventura_roof_pv_om_low,
                ventura_roof_pv_const_low)

# Clean up environment
remove(sb_utility_pv_om, sb_utility_pv_const, sb_roof_pv_om, sb_roof_pv_const,
       sb_utility_pv_om_low, sb_utility_pv_const_low, sb_roof_pv_om_low, sb_roof_pv_const_low,
       slo_utility_pv_om, slo_utility_pv_const, slo_roof_pv_om, slo_roof_pv_const,
       slo_utility_pv_om_low, slo_utility_pv_const_low, slo_roof_pv_om_low, slo_roof_pv_const_low,
       ventura_utility_pv_om, ventura_utility_pv_const, ventura_roof_pv_om, ventura_roof_pv_const,
       ventura_utility_pv_om_low, ventura_utility_pv_const_low, ventura_roof_pv_om_low,
       ventura_roof_pv_const_low)
```

## Floating Offshore Wind

Use the following code to add floating offshore wind jobs to dataset

### Define Functions
```{r}
###################### OSW Construction Jobs Function ######################  
#' Calculate OSW Construction jobs and annual capacity
#'
#' @param county Character string. Name of the county.
#' @param start_year Integer. The year that you are starting with. E.g., 2025 for a 2025-2045 analysis.
#' @param end_year Integer. The year you are ending with. E.g., 2045 for a 2025-2045 analysis.
#' @param ambition Character string, either "High" or "Low".
#' @param initial_capacity Numeric. Starting capacity in Gigawatts. E.g., 5 for 5 GW of wind to begin constructing at the start year
#' @param target_capacity Numeric. Target capacity in Gigawatts. E.g., 15 for 15 GW goal in end year.
#' @param direct_jobs Numeric. JEDI output representing number of direct construction jobs per GW of OSW.
#' @param indirect_jobs Numeric. JEDI output representing number of indirect construction jobs per GW of OSW.
#' @param induced_jobs Numeric. JEDI output representing number of induced construction jobs per GW of OSW.
#'
#' @return Data Frame projecting total construction jobs each year and energy capacity over designated time period
#'
#' @examples
#' Central Coast construction jobs from 2025-2045, starting with 0.1 GW in 2025 and increasing to 15 GW by 2045:
#' calculate_osw_construction_jobs(county = "Tri-County",
#'                                         start_year = 2025, 
#'                                         end_year = 2045, 
#'                                         ambition = "High", 
#'                                         initial_capacity = 0.1,
#'                                         target_capacity = 15, 
#'                                         direct_jobs = 82, 
#'                                         indirect_jobs = 2571, 
#'                                         induced_jobs = 781
#'                                         )

calculate_osw_construction_jobs <- function(county, start_year, end_year, ambition, initial_capacity,
                                            target_capacity, direct_jobs, indirect_jobs, induced_jobs) {
    # initial capacity cannot be zero!
    if (initial_capacity == 0 || initial_capacity < 0){
        stop("initial_capacity must be a positive, non-zero number")
    }
    
    # Create list of years
    year = start_year:end_year
    
    # Calculate the annual growth rate
    growth_rate <- (target_capacity / initial_capacity)^(1 / (end_year - (start_year+5))) - 1
    
    # Add total capacity for each year into empty list
    total_capacity <- numeric(length(year))
    
    # Calculate up and running capacity, starting 5 years after the year construction starts
    for (i in 6:length(year)) {
        total_capacity[i] <- initial_capacity * (1 + growth_rate)^(year[i] - (start_year + 5))
    }  
    
    # Calculate new capacity on the year construction starts
    new_capacity = lead(total_capacity, 5) - lead(total_capacity, 4)
    
    # Fill NAs with 0
    new_capacity[is.na(new_capacity)] <- 0
    
    # Create a data frame with the results
    df <- data.frame(county = county, 
                     year = year, 
                     technology = "Offshore Wind",
                     ambition = ambition,
                     new_capacity_mw = round(new_capacity*1000, 2),
                     total_capacity_mw = round(total_capacity*1000, 2),
                     new_capacity_gw = round(new_capacity, 2),
                     total_capacity_gw = round(total_capacity, 2))
    
    # Direct jobs
    # Initialize jobs/per GW Year that will be multiplied by capacity each year
    direct_jobs_gw_year <- direct_jobs/5 # Direct construction jobs outputted by JEDI / 5 Years
    # New jobs each year
    new_jobs <- direct_jobs_gw_year * df$new_capacity_gw
    
    # Total direct jobs each year: need to sum construction jobs over 5 year periods
    df_direct <- df %>%
        mutate(occupation = "Construction", 
               type = "direct", 
               n_jobs = zoo::rollapply(new_jobs, width = 5, FUN = sum, align = "right", partial = TRUE))
    
    # Indirect jobs
    # Initialize jobs/per GW Year that will be multiplied by capacity each year
    indirect_jobs_gw_year <- indirect_jobs/5 # Direct construction jobs outputted by JEDI / 5 Years
    # New jobs each year
    new_jobs <- indirect_jobs_gw_year * df$new_capacity_gw
    
    # Total indirect jobs each year: need to sum construction jobs over 5 year periods
    df_indirect <- df %>%
        mutate(occupation = "Construction", 
               type = "indirect", 
               n_jobs = zoo::rollapply(new_jobs, width = 5, FUN = sum, align = "right", partial = TRUE))
    
    # Induced jobs
    # Initialize jobs/per GW Year that will be multiplied by capacity each year
    induced_jobs_gw_year <- induced_jobs/5 # Direct construction jobs outputted by JEDI / 5 Years
    # New jobs each year
    new_jobs <- induced_jobs_gw_year * df$new_capacity_gw
    
    # Total indirect jobs each year: need to sum construction jobs over 5 year periods
    df_induced <- df %>%
        mutate(occupation = "Construction", 
               type = "induced", 
               n_jobs = zoo::rollapply(new_jobs, width = 5, FUN = sum, align = "right", partial = TRUE))
    
    # Stack them together for total jobs
    df_final <- rbind(df_direct, df_indirect, df_induced)
    
}

###################### OSW Operations and Maintenance Jobs Function ######################  
#' Calculate OSW O&M jobs and annual capacity
#'
#' @param county Character string. Name of the county.
#' @param start_year Integer. The year that you are starting with. E.g., 2025 for a 2025-2045 analysis.
#' @param end_year Integer. The year you are ending with. E.g., 2045 for a 2025-2045 analysis.
#' @param ambition Character string, either "High" or "Low".
#' @param initial_capacity Numeric. Starting capacity in Gigawatts. E.g., 5 for 5 GW of wind to begin constructing at the start year
#' @param target_capacity Numeric. Target capacity in Gigawatts. E.g., 15 for 15 GW goal in end year.
#' @param direct_jobs Numeric. JEDI output representing number of direct O&M jobs per GW of OSW.
#' @param indirect_jobs Numeric. JEDI output representing number of indirect O&M jobs per GW of OSW.
#' @param induced_jobs Numeric. JEDI output representing number of induced O&M jobs per GW of OSW.
#'
#' @return Data Frame projecting total O&M jobs each year and energy capacity over designated time period
#'
#' @examples
#' #' Central Coast O&M jobs from 2025-2045, starting with 0.1 GW in 2025 and increasing to 15 GW by 2045:
#' calculate_osw_om_jobs(county = "Tri-County",
#'                       start_year = 2025, 
#'                       end_year = 2045, 
#'                       ambition = "High", 
#'                       initial_capacity = 0.1,
#'                       target_capacity = 15, 
#'                       direct_jobs = 127, 
#'                       indirect_jobs = 126, 
#'                       induced_jobs = 131)

calculate_osw_om_jobs <- function(county, start_year, end_year, ambition, initial_capacity,
                                  target_capacity, direct_jobs, indirect_jobs, induced_jobs) {
    
    # initial capacity cannot be zero!
    if (initial_capacity == 0 || initial_capacity < 0){
        stop("initial_capacity must be a positive, non-zero number")
    }
    
    # Create list of years
    year = start_year:end_year
    
    # Calculate the annual growth rate
    growth_rate <- (target_capacity / initial_capacity)^(1 / (end_year - (start_year+5))) - 1
    
    # Add total capacity for each year into empty list
    total_capacity <- numeric(length(year))
    
    # Calculate up and running capacity, starting 5 years after the year construction starts
    for (i in 6:length(year)) {
        total_capacity[i] <- initial_capacity * (1 + growth_rate)^(year[i] - (start_year + 5))
    }  
    
    # Calculate new capacity on the year construction starts
    new_capacity = lead(total_capacity, 5) - lead(total_capacity, 4)
    
    # Fill NAs with 0
    new_capacity[is.na(new_capacity)] <- 0
    
    # Create a data frame with the results
    df <- data.frame(county = county, 
                     year = year, 
                     technology = "Offshore Wind",
                     ambition = ambition,
                     new_capacity_mw = round(new_capacity*1000, 2),
                     total_capacity_mw = round(total_capacity*1000, 2),
                     new_capacity_gw = round(new_capacity, 2),
                     total_capacity_gw = round(total_capacity, 2))
    
    # Calculate direct jobs
    df_direct <- df %>%
        mutate(occupation = "O&M", 
               type = "direct", 
               n_jobs = total_capacity_gw * direct_jobs)
    
    # Calculate indirect jobs
    df_indirect <- df %>%
        mutate(occupation = "O&M", 
               type = "indirect", 
               n_jobs = total_capacity_gw * indirect_jobs)
    
    # Calculate induced jobs
    df_induced <- df %>%
        mutate(occupation = "O&M", 
               type = "induced", 
               n_jobs = total_capacity_gw * induced_jobs)
    
    # Stack them together for total jobs
    df_final <- rbind(df_direct, df_indirect, df_induced)
    
    return(df_final)
}
```


### Create OSW Jobs Data Frame

```{r}
# High ambition ----
# O&M OSW
osw_om_high <- calculate_osw_om_jobs(county = "Tri-county",
                                     start_year = 2025,
                                     end_year = 2045,
                                     ambition = "High",
                                     initial_capacity = 0.1,
                                     target_capacity = 15,
                                     direct_jobs = 127,
                                     indirect_jobs = 126,
                                     induced_jobs = 131)
# Construction OSW
osw_construction_high <- calculate_osw_construction_jobs(county = "Tri-County",
                                                         start_year = 2025, 
                                                         end_year = 2045, 
                                                         ambition = "High", 
                                                         initial_capacity = 0.1,
                                                         target_capacity = 15, 
                                                         direct_jobs = 82, 
                                                         indirect_jobs = 2571, 
                                                         induced_jobs = 781)

# Low ambition ----
# O&M OSW
osw_om_low <- calculate_osw_om_jobs(county = "Tri-county",
                                    start_year = 2025,
                                    end_year = 2045,
                                    ambition = "Low",
                                    initial_capacity = 0.1,
                                    target_capacity = 6,
                                    direct_jobs = 127,
                                    indirect_jobs = 126,
                                    induced_jobs = 131)


# Construction OSW
osw_construction_low <- calculate_osw_construction_jobs(county = "Tri-county",
                                                        start_year = 2025,
                                                        end_year = 2045,
                                                        ambition = "Low",
                                                        initial_capacity = 0.1,
                                                        target_capacity = 6,
                                                        direct_jobs = 127,
                                                        indirect_jobs = 126,
                                                        induced_jobs = 131)

# Combine all OSW projections ----
osw_all <- rbind(osw_om_high, osw_construction_high, osw_om_low, osw_construction_low)

# Join with PV data ----
pv_and_osw <- rbind(osw_all, pv_all)

# Clear environment
remove(osw_om_high, osw_construction_high, osw_om_low, osw_construction_low)
```

## Oil Well Capping

```{r}
# Read in well data from Deshmukh et al. paper
wells <- read_csv(here("data", "AllWells_20210427.csv"))
```

In the Central Coast, there are 3,149 idle oil and gas wells

### Create Oil Capping Jobs Data Frame

We will predict the jobs created from capping all idle and active oil & gas wells in the Central Coast by 2045. 

**Assumptions:**
- The average lifespan of a well is 15-20 years, so all active wells will become idle by 2045
- The number of new wells that will be drilled in that time is negligible 
- It takes 0.25 FTE jobs to cap 1 oil well (source: ________)
```{r}
############################# Santa Barbara #############################

# Calculate total wells in Santa Barbara to be capped and save - include Idle, Active, and New
idle_plus_active_wells_sb <- nrow(wells |>
    filter(WellStatus %in% c("Idle", "Active", "New") &
               WellTypeLa == "Oil & Gas" &
               CountyName == "Santa Barbara"))

# Calculate the capping rate (number of wells to cap each year)
capping_rate <- idle_plus_active_wells_sb / (2045-2025)

# Make df with year
oil_capping_jobs <- data.frame(
    year = 2025:2045
)

# Calculate total wells capped at each year
oil_capping_jobs <- oil_capping_jobs |>
    mutate(total_wells_capped = round((year - 2025) * capping_rate, 0))

# Calculate total jobs
oil_capping_jobs_sb <- oil_capping_jobs |>
    mutate(total_jobs_created = round(total_wells_capped * 0.25, 0),
           county = "Santa Barbara")

############################# San Luis Obispo #############################

# Calculate total wells in Santa Barbara to be capped and save - include Idle, Active, and New
idle_plus_active_wells_slo <- nrow(wells |>
    filter(WellStatus %in% c("Idle", "Active", "New") &
               WellTypeLa == "Oil & Gas" &
               CountyName == "San Luis Obispo"))

# Calculate the capping rate (number of wells to cap each year)
capping_rate <- idle_plus_active_wells_slo / (2045-2025)

# Make df with year
oil_capping_jobs <- data.frame(
    year = 2025:2045
)

# Calculate total wells capped at each year
oil_capping_jobs <- oil_capping_jobs |>
    mutate(total_wells_capped = round((year - 2025) * capping_rate, 0))

# Calculate total jobs
oil_capping_jobs_slo <- oil_capping_jobs |>
    mutate(total_jobs_created = round(total_wells_capped * 0.25, 0),
           county = "San Luis Obispo")

############################# Ventura #############################

# Calculate total wells in Santa Barbara to be capped and save - include Idle, Active, and New
idle_plus_active_wells_v <- nrow(wells |>
    filter(WellStatus %in% c("Idle", "Active", "New") &
               WellTypeLa == "Oil & Gas" &
               CountyName == "Ventura"))

# Calculate the capping rate (number of wells to cap each year)
capping_rate <- idle_plus_active_wells_v / (2045-2025)

# Make df with year
oil_capping_jobs <- data.frame(
    year = 2025:2045
)

# Calculate total wells capped at each year
oil_capping_jobs <- oil_capping_jobs |>
    mutate(total_wells_capped = round((year - 2025) * capping_rate, 0))

# Calculate total jobs
oil_capping_jobs_v <- oil_capping_jobs |>
    mutate(total_jobs_created = round(total_wells_capped * 0.25, 0),
           county = "Ventura")
```

```{r}
# Combine oil capping jobs
oil_capping_jobs <- rbind(oil_capping_jobs_slo, 
                          oil_capping_jobs_sb, 
                          oil_capping_jobs_v)

# Clear environment
remove(wells, capping_rate, idle_plus_active_wells_sb, 
       idle_plus_active_wells_slo, idle_plus_active_wells_v,
       oil_capping_jobs_sb, oil_capping_jobs_slo, oil_capping_jobs_v)
```


- **SLO:** Capping all 337 idle and active oil and gas wells in San Luis Obispo county by 2045 will create about 4 annual jobs for 20 years for a total of 84 jobs
- **SB:** Capping all 1,977 idle and active oil and gas wells in Santa Barbara county by 2045 will create about 25 annual jobs for 20 years for a total of 494 jobs
- **Ventura:** Capping all 3,188 idle and active oil and gas wells in Ventura county by 2045 will create about 40 annual jobs for 20 years for a total of 797 jobs


## Land-Based Wind

### Define Functions
```{r}
###################### Land Wind O&M Jobs Function ######################
#' Calculate Land-Based Wind Operations and Maintenance jobs and annual capacity
#'
#' @param county Character string. Name of the county.
#' @param start_year Integer. The year that you are starting with. E.g., 2025 for a 2025-2045 analysis.
#' @param end_year Integer. The year you are ending with. E.g., 2045 for a 2025-2045 analysis.
#' @param initial_capacity Numeric. Starting capacity in Gigawatts.
#' @param final_capacity Numeric. Target capacity in Gigawatts. E.g., 5 for 5 GW goal in 2045.
#' @param direct_jobs Numeric. JEDI output representing number of direct O&M jobs per GW of land wind.
#' @param indirect_jobs Numeric. JEDI output representing number of indirect O&M jobs per GW of land wind.
#' @param induced_jobs Numeric. JEDI output representing number of induced O&M jobs per GW of land wind.
#'
#' @return Data Frame projecting total O&M jobs each year and energy capacity over designated time period
#'
#' @examples
#' Santa Barbara Land-Based Wind O&M Jobs from 2025-2045, starting with 0.98 GW in 2025 and increasing to 3 GW by 2045:
#' sb_land_wind_om_jobs <- calculate_land_wind_om_jobs(county = "SB",
#'                                            start_year = 2025,
#'                                            end_year = 2045,
#'                                            initial_capacity = 0.98,
#'                                            final_capacity = 3,
#'                                            direct_jobs = 0.5,
#'                                            indirect_jobs = 0.1,
#'                                            induced_jobs = 0.2)
#' print(sb_land_wind_om_jobs) 

calculate_land_wind_om_jobs <- function(county, start_year, end_year, initial_capacity,
                                        final_capacity, direct_jobs, indirect_jobs, induced_jobs) {
    
    # Calculate the annual growth rate
    growth_rate <- (final_capacity / initial_capacity)^(1 / (end_year - start_year)) - 1
    
    # Create variables to store the results
    year <- start_year:end_year
    capacity <- numeric(length(year))
    new_capacity <- numeric(length(year))
    
    # Calculate the total capacity for each year
    for (i in 1:length(year)) {
        capacity[i] <- initial_capacity * (1 + growth_rate)^(year[i] - start_year)
        if (i == 1) {
            new_capacity[i] <- capacity[i] - initial_capacity
        } else {
            new_capacity[i] <- capacity[i] - capacity[i-1]
        }
    }
    
    # Create a data frame with the results
    df <- data.frame(county = county, 
                     year = year, 
                     technology = "Land-Based Wind",
                     ambition = NA,
                     new_capacity_mw = round(new_capacity*1000, 2),
                     total_capacity_mw = round(capacity*1000, 2),
                     new_capacity_gw = round(new_capacity, 2),
                     total_capacity_gw = round(capacity, 2))
    
    # Direct jobs
    df_direct <- df %>%
        mutate(occupation = "O&M", 
               type = "direct", 
               n_jobs = round(total_capacity_gw * direct_jobs, 2))
    
    # Indirect jobs
    df_indirect <- df %>%
        mutate(occupation = "O&M",
               type = "indirect", 
               n_jobs = round(total_capacity_gw * indirect_jobs, 2))
    
    # Induced jobs
    df_induced <- df %>%
        mutate(occupation = "O&M",
               type = "induced", 
               n_jobs = round(total_capacity_gw * induced_jobs, 2))
    
    # Stack them together for total jobs
    df_final <- rbind(df_direct, df_indirect, df_induced)
    
    return(df_final)
}

#################### Land Wind Construction Jobs Function ####################
#' Calculate Land Wind Construction jobs and annual capacity
#'
#' @param county Character string. Name of the county.
#' @param start_year Integer. The year that you are starting with. E.g., 2025 for a 2025-2045 analysis.
#' @param end_year Integer. The year you are ending with. E.g., 2045 for a 2025-2045 analysis.
#' @param initial_capacity Numeric. Starting capacity in Gigawatts.
#' @param final_capacity Numeric. Target capacity in Gigawatts. E.g., 5 for 5 GW goal in 2045.
#' @param direct_jobs Numeric. JEDI output representing number of direct construction jobs per GW of land wind.
#' @param indirect_jobs Numeric. JEDI output representing number of indirect construction jobs per GW of land wind.
#' @param induced_jobs Numeric. JEDI output representing number of induced construction jobs per GW of land wind.
#'
#' @return Data Frame projecting total construction jobs each year and energy capacity over designated time period
#'
#' @examples
#' Santa Barbara Land-Based Wind construction Jobs from 2025-2045, starting with 0.98 GW in 2025 and increasing to 3 GW by 2045:
#' sb_land_wind_const_jobs <- calculate_land_wind_const_jobs(county = "SB",
#'                                            start_year = 2025,
#'                                            end_year = 2045,
#'                                            initial_capacity = 0.98,
#'                                            final_capacity = 3,
#'                                            direct_jobs = 0.5,
#'                                            indirect_jobs = 0.1,
#'                                            induced_jobs = 0.2)
#' print(sb_land_wind_const_jobs) 

calculate_land_wind_construction_jobs <- function(county, start_year, end_year, initial_capacity, final_capacity, direct_jobs, indirect_jobs, induced_jobs) {
    
    # Calculate the annual growth rate
    growth_rate <- (final_capacity / initial_capacity)^(1 / (end_year - start_year)) - 1
    
    # Create variables to store the results
    year <- start_year:end_year
    capacity <- numeric(length(year))
    new_capacity <- numeric(length(year))
    
    # Calculate the total capacity for each year
    for (i in 1:length(year)) {
        capacity[i] <- initial_capacity * (1 + growth_rate)^(year[i] - start_year)
        if (i == 1) {
            new_capacity[i] <- capacity[i] - initial_capacity
        } else {
            new_capacity[i] <- capacity[i] - capacity[i-1]
        }
    }
    
    # Create a data frame with the results
    df <- data.frame(county = county, 
                     year = year, 
                     technology = "Land-Based Wind",
                     ambition = NA,
                     new_capacity_mw = round(new_capacity*1000, 2),
                     total_capacity_mw = round(capacity*1000, 2),
                     new_capacity_gw = round(new_capacity, 2),
                     total_capacity_gw = round(capacity, 2))
    
    # Direct jobs - it is assumed that construction of land wind project takes on average 1 year
    df_direct <- df %>%
        mutate(occupation = "Construction", 
               type = "direct", 
               n_jobs = round(new_capacity_gw * direct_jobs, 2))
    
    # Indirect jobs
    df_indirect <- df %>%
        mutate(occupation = "Construction",
               type = "indirect", 
               n_jobs = round(new_capacity_gw * indirect_jobs, 2))
    
    # Induced jobs
    df_induced <- df %>%
        mutate(occupation = "Construction",
               type = "induced", 
               n_jobs = round(new_capacity_gw * induced_jobs, 2))
    
    # Stack them together for total jobs
    df_final <- rbind(df_direct, df_indirect, df_induced)
    
    return(df_final)
}
```

### Create Land-Based Wind Jobs Data Frame

Land-based wind projections are not included in our analysis for reporting, because there are unclear capacity goals in the Central Coast. However, we wanted to include this technology option in our dashboard, in the case that land-based wind becomes an energy source that the central coast is interested in expanding. 
The following code is just a test that the above function works as anticipated, and these results will not be incorporated into our data. 

```{r}
land_wind_construction_test <- calculate_land_wind_construction_jobs(county = "SB",
                                                                     start_year = 2025,
                                                                     end_year = 2045,
                                                                     initial_capacity = 0.98,
                                                                     final_capacity = 5,
                                                                     direct_jobs = 1,
                                                                     indirect_jobs = 1,
                                                                     induced_jobs = 1)

land_wind_om_test <- calculate_land_wind_om_jobs(county = "SB",
                                                 start_year = 2025,
                                                 end_year = 2045,
                                                 initial_capacity = 0.98,
                                                 final_capacity = 5,
                                                 direct_jobs = 1,
                                                 indirect_jobs = 1,
                                                 induced_jobs = 1)
```




## Fossil Fuel Phaseout

Fossil fuel phaseout analysis here

##################################################################################################################

# Plots

## Plots for faculty review

Base plot to refer back to, using Ventura utility as an example
```{r, fig.height= 6, fig.width= 8}
pv_v_plot <- pv_all |>
    filter(type == "direct" &
               county == "V" &
               technology == "Utility PV") 


pv_all_plot1 <- ggplot(pv_v_plot) +
    theme_minimal() +
    geom_bar(aes(x = year, y = n_jobs, fill = occupation), size = 1.25, position = "stack", stat="identity") +
    scale_fill_manual(values = c("Construction" = '#4a4e69', "O&M" = '#9a8c98'))+ 
    labs(x = NULL,
         y= "FTE jobs") +
    scale_y_continuous(labels = scales::label_comma()) +
    scale_fill_manual(labels = c("Construction Jobs", "Operations & Maintenance Jobs"),
                      values = c("#4a4e69", "#9a8c98")) +
    theme_minimal() +
    theme(
        axis.title.x = element_blank(),
        axis.title.y = element_text(size = 24, margin = margin(5,20,0,10)),
        axis.text = element_text(size = 20), 
        legend.title = element_blank(),
        legend.text = element_text(size = 20),
        legend.position = "bottom",
        plot.background = element_rect(fill = "#EFEFEF"),
        plot.title = element_blank(),
        panel.grid = element_line(color = "grey85")
    )


pv_all_plot1


ggsave('plots/pv_base_plot.png', pv_all_plot1, width = 8, height = 6)

```

SLO Utility plots for faculty talk
```{r}
# SLO Utility PV capacity plot
pv_capacity_growth_plot_SLO <- ggplot(slo_utility_pv_const) +
    theme_minimal() +
    geom_line(aes(x = year, y = new_capacity), color = "#9a8c98", lwd = 2) +
    geom_line(aes(x = year, y = total_capacity), color = "#4a4e69", lwd = 2) +
    theme(plot.background = element_rect(color = "black", fill = NA, size = 1),
          legend.text = element_blank(),
          axis.text.x = element_text(size = 16),  # Rotate x-axis labels
          axis.text.y = element_text(size = 16), 
          legend.position = 'none') +
    labs(x = NULL,
         y= "Capacity (MW)") +
    scale_y_continuous(labels = scales::label_comma()) +
    scale_fill_manual(labels = c("New capacity", "Total capacity"),
                      values = c("#4a4e69", "#9a8c98")) +
    theme_minimal() +
    theme(
        axis.title.x = element_blank(),
        axis.title.y = element_text(size = 24, margin = margin(5,20,0,10)),
        axis.text = element_text(size = 20), 
        legend.title = element_blank(),
        legend.text = element_text(size = 20),
        legend.position = "bottom",
        plot.background = element_rect(fill = "#EFEFEF"),
        plot.title = element_blank(),
        plot.margin = margin(10,10,10,10),
        panel.grid = element_line(color = "grey85")
    )

ggsave('plots/pv_capacity_growth_plot_SLO.png', pv_capacity_growth_plot_SLO, width = 8, height = 6)

# SLO Utility PV direct jobs plot
slo_pv_jobs_plot <- pv_all |>
    filter(type == "direct" &
               county == "SLO" &
               technology == "Utility PV") |>
    ggplot() +
    theme_minimal() +
    geom_bar(aes(x = year, y = n_jobs, fill = occupation), size = 1.25, position = "stack", stat="identity") +
    scale_fill_manual(values = c("Construction" = '#4a4e69', "O&M" = '#9a8c98'))+ 
    labs(x = NULL,
         y= "FTE jobs") +
    scale_y_continuous(labels = scales::label_comma()) +
    scale_fill_manual(labels = c("Construction Jobs", "Operations & Maintenance Jobs"),
                      values = c("#4a4e69", "#9a8c98")) +
    theme_minimal() +
    theme(
        axis.title.x = element_blank(),
        axis.title.y = element_text(size = 24, margin = margin(5,20,0,10)),
        axis.text = element_text(size = 20), 
        legend.title = element_blank(),
        legend.text = element_text(size = 20),
        legend.position = "bottom",
        plot.background = element_rect(fill = "#EFEFEF"),
        plot.title = element_blank(),
        plot.margin = margin(10,50,10,10),
        panel.grid = element_line(color = "grey85")
    )

ggsave('plots/slo_utilpv_jobs_plot.png', slo_pv_jobs_plot, width = 8, height = 6)

```

Plot of Ventura pv capacities
```{r}
#pv_cap_plot 

pv_capacity_growth_plot_V <- ggplot(ventura_utility_pv_const) +
    theme_minimal() +
    geom_line(aes(x = year, y = new_capacity), color = "#9a8c98", lwd = 2) +
    geom_line(aes(x = year, y = total_capacity), color = "#4a4e69", lwd = 2) +
    theme(plot.background = element_rect(color = "black", fill = NA, size = 1),
          legend.text = element_blank(),
          axis.text.x = element_text(size = 16),  # Rotate x-axis labels
          axis.text.y = element_text(size = 16), 
          legend.position = 'none') +
    labs(x = NULL,
         y= "Capacity (GW)") +
    scale_y_continuous(labels = scales::label_comma()) +
    scale_fill_manual(labels = c("New capacity", "Total capacity"),
                      values = c("#4a4e69", "#9a8c98")) +
    theme_minimal() +
    theme(
        axis.title.x = element_blank(),
        axis.title.y = element_text(size = 24, margin = margin(5,20,0,10)),
        axis.text = element_text(size = 20), 
        legend.title = element_blank(),
        legend.text = element_text(size = 20),
        legend.position = "bottom",
        plot.background = element_rect(fill = "#EFEFEF"),
        plot.title = element_blank(),
        panel.grid = element_line(color = "grey85")
    )

ggsave('plots/pv_capacity_growth_plot_V.png', pv_capacity_growth_plot_V, width = 8, height = 6)
pv_capacity_growth_plot_V
```

Utility PV in Ventura

```{r, fig.height= 7, fig.width= 10}
# 2nd plot attempt
pv_u_v_plot <- pv_all |>
    filter(type == "direct" &
               county == "V" &
               technology == "Utility PV") 


pv_u_v_plot <- ggplot(pv_u_v_plot) +
    theme_minimal() +
    geom_bar(aes(x = year, y = n_jobs, fill = occupation), size = 1.25, position = "stack", stat="identity")+
    scale_fill_manual(values = c("Construction" = '#4a4e69', "O&M" = '#9a8c98')) + 
    labs(x = NULL,
         y= "FTE jobs",
         title = "Projected direct jobs in Ventura county from Utility PV development") +
    scale_y_continuous(labels = scales::label_comma()) +
    scale_fill_manual(labels = c("Construction Jobs", "Operations & Maintenance Jobs"),
                      values = c("#4a4e69", "#9a8c98")) +
    theme_minimal() +
    theme(
        axis.title.x = element_blank(),
        axis.title.y = element_text(size = 24, margin = margin(5,20,0,10)),
        axis.text = element_text(size = 20), 
        legend.title = element_blank(),
        legend.text = element_text(size = 20),
        legend.position = "bottom",
        plot.background = element_rect(fill = "#EFEFEF"),
        plot.title = element_blank(),
        panel.grid = element_line(color = "grey85")
    )


pv_u_v_plot


ggsave('plots/pv_u_v_plot.png', pv_u_v_plot, width = 10, height = 7)
```

Utility PV in Santa Barbara

```{r, fig.height= 6, fig.width= 8}
pv_u_sb_plot <- pv_all |>
    filter(type == "direct" &
               county == "SB" &
               technology == "Utility PV") 


pv_u_sb_plot1 <- ggplot(pv_u_sb_plot) +
    theme_minimal() +
    geom_bar(aes(x = year, y = n_jobs, fill = occupation), size = 1.25, position = "stack", stat="identity")+
    scale_fill_manual(values = c("Construction" = '#4a4e69', "O&M" = '#9a8c98'))+ 
    #scale_x_continuous(expand = c(0, 0), breaks = scales::pretty_breaks()) +  # Remove space on x-axis
    # scale_y_continuous(expand = c(0, 0), breaks = scales::pretty_breaks()) +   # Remove space on y-axis 
    theme(plot.background = element_rect(color = "black", fill = NA, size = 1),
          #legend.text = element_blank(),
          axis.text.x = element_text(size = 16),  # Rotate x-axis labels
          axis.text.y = element_text(size = 16))+
    labs(x = NULL,
         y= "FTE jobs",
         title = "Projected direct jobs in Santa Barbara county from Utility PV development") +
    scale_y_continuous(labels = scales::label_comma()) +
    scale_fill_manual(labels = c("Construction Jobs", "Operations & Maintenance Jobs"),
                      values = c("#4a4e69", "#9a8c98")) +
    theme_minimal() +
    theme(
        axis.title.x = element_blank(),
        axis.title.y = element_text(size = 24, margin = margin(5,20,0,10)),
        axis.text = element_text(size = 20), 
        legend.title = element_blank(),
        legend.text = element_text(size = 20),
        legend.position = "bottom",
        plot.background = element_rect(fill = "#EFEFEF"),
        plot.title = element_blank(),
        panel.grid = element_line(color = "grey85")
    )



pv_u_sb_plot1


ggsave('plots/pv_u_sb_plot.png', pv_all_plot1, width = 8, height = 6)
```

Utility PV in San Luis Obispo
```{r, fig.height= 6, fig.width= 8}
pv_u_slo_plot <- pv_all |>
    filter(type == "direct" &
               county == "SLO" &
               technology == "Utility PV") 


pv_u_slo_plot1 <- ggplot(pv_u_slo_plot) +
    theme_minimal() +
    geom_bar(aes(x = year, y = n_jobs, fill = occupation), size = 1.25, position = "stack", stat="identity")+
    scale_fill_manual(values = c("Construction" = '#4a4e69', "O&M" = '#9a8c98'))+ 
    #scale_x_continuous(expand = c(0, 0), breaks = scales::pretty_breaks()) +  # Remove space on x-axis
    # scale_y_continuous(expand = c(0, 0), breaks = scales::pretty_breaks()) +   # Remove space on y-axis 
    theme(plot.background = element_rect(color = "black", fill = NA, size = 1),
          #legend.text = element_blank(),
          axis.text.x = element_text(size = 16),  # Rotate x-axis labels
          axis.text.y = element_text(size = 16))+
    labs(x = NULL,
         y= "FTE jobs",
         title = "Projected direct jobs in San Luis Obispo county from Utility PV development")


pv_u_slo_plot1


ggsave('plots/pv_u_slo_plot.png', pv_all_plot1, width = 8, height = 6)
```


Plot of osw capacities
```{r}
total_cap_line <- osw |>
    filter(year %in% c(2030:2045))
annual_cap_line <- osw |>
    filter(year %in% c(2026:2041))

osw_capacity_growth_plot_faculty_review <- ggplot() +
    geom_point(data = total_cap_line, 
               aes(x = year, y = total_capacity),
               color = "#9a8c98",
               lwd = 2) +
    geom_line(data = annual_cap_line,
              aes(x = year, y = new_construction_capacity),
              color = "#4a4e69",
              lwd = 2) +
    scale_x_continuous(limits = c(2025,2045)) +
    # scale_y_continuous(limits = c(0,15),
    #                    breaks = c(0,5,10,15)) +
    labs(y = "Capacity (GW)") +
    theme_minimal() +
    theme(
        axis.title.x = element_blank(),
        axis.title.y = element_text(size = 24, margin = margin(5,20,0,10)),
        axis.text = element_text(size = 20),
        legend.title = element_blank(),
        legend.text = element_text(size = 20),
        legend.position = "bottom",
        plot.background = element_rect(fill = "#EFEFEF"),
        plot.title = element_blank(),
        panel.grid = element_line(color = "grey85")
    )

ggsave("osw_capacity_growth_plot_faculty_review.png",
       osw_capacity_growth_plot_faculty_review,
       width = 10,
       height = 7)
```

```{r}
ggplot(osw) +
    geom_col(aes(x = year, y = total_jobs)) +
    labs(title = "Projected direct construction jobs in CCC from OSW development",
         y = "FTE Jobs") +
    scale_y_continuous(labels = scales::label_comma()) +
    theme_minimal() +
    theme(
        axis.title.x = element_blank()
    )
```

```{r}
#direct_jobs_stacked_bar_faculty_review <- 
osw2 |>
    #filter(type == "indirect") |>
    ggplot() +
    geom_col(aes(x = year, y = n_jobs)) #+
labs(title = "Projected direct jobs in CA Central Coast from floating OSW development",
     y = "FTE Jobs") +
    scale_y_continuous(labels = scales::label_comma(),
                       limits = c(0,2000)) +
    scale_fill_manual(labels = c("Construction Jobs", "Operations & Maintenance Jobs"),
                      values = c("#4a4e69", "#9a8c98")) +    
    theme_minimal() +
    theme(
        axis.title.x = element_blank(),
        axis.title.y = element_text(size = 24, margin = margin(5,20,0,10)),
        axis.text = element_text(size = 20), 
        legend.title = element_blank(),
        legend.text = element_text(size = 20),
        legend.position = "bottom",
        plot.background = element_rect(fill = "#EFEFEF"),
        plot.title = element_blank(),
        panel.grid = element_line(color = "grey85")
    )

ggsave("osw_direct_jobs_stacked_bar_faculty_review.png",
       direct_jobs_stacked_bar_faculty_review,
       width = 10, height = 7)
```

## Plots for advocacy meeting

```{r}
# high ambition 2045 goal offshore wind
osw_2045_high <- osw_all %>% 
    filter(ambition =="High" &
               type == 'direct' &
               occupation %in% c('O&M', 'Construction'))

osw_2045_high_plot <- ggplot(osw_2045_high, aes(x = year, y = n_jobs, group = occupation)) +
    geom_col(aes(fill = occupation)) +
    scale_fill_manual(labels = c("Construction Jobs", "Operations & Maintenance Jobs"),
                      values = c("#4a4e69", "#9a8c98")) +
    scale_y_continuous(limits = c(0, 2000)) +
    labs(title = "Projected direct jobs in CA Central Coast from floating OSW development",
     y = "FTE Jobs") +
    theme_minimal() +
    theme(
        axis.title.x = element_blank(),
        axis.title.y = element_text(size = 24, margin = margin(5,20,0,10)),
        axis.text = element_text(size = 20), 
        plot.title = element_text(size=28),
        legend.title = element_blank(),
        legend.text = element_text(size = 20),
        legend.position = "bottom",
        plot.background = element_rect(fill = "#EFEFEF"),
        panel.grid = element_line(color = "grey85")
    )

#ggsave('plots/osw_high_advocacy.png', osw_2045_high_plot, width = 12, height = 10)
```

```{r}
# low ambition 2045 goal offshore wind
osw_2045_low <- osw_all %>% 
    filter(ambition =="Low" &
               type == 'direct' &
               occupation %in% c('O&M', 'Construction'))

osw_2045_low_plot <- ggplot(osw_2045_low, aes(x = year, y = n_jobs, group = occupation)) +
    geom_col(aes(fill = occupation)) +
    scale_fill_manual(labels = c("Construction Jobs", "Operations & Maintenance Jobs"),
                      values = c("#4a4e69", "#9a8c98")) +
    scale_y_continuous(limits = c(0, 2000)) +
    labs(title = "Projected direct jobs in CA Central Coast from floating OSW development",
     y = "FTE Jobs") +
    theme_minimal() +
    theme(
        axis.title.x = element_blank(),
        axis.title.y = element_text(size = 24, margin = margin(5,20,0,10)),
        axis.text = element_text(size = 20), 
        plot.title = element_text(size=28),
        legend.title = element_blank(),
        legend.text = element_text(size = 20),
        legend.position = "bottom",
        plot.background = element_rect(fill = "#EFEFEF"),
        panel.grid = element_line(color = "grey85")
    )

#ggsave('plots/osw_low_advocacy.png', osw_2045_low_plot, width = 12, height = 10)
```

```{r}
# JEDI outputs for 1 GW of OSW in CC conglomerate for construction and O&M in data frame
cc_1gw_jobs <- data.frame(
  Category = rep(c("Construction", "Operations & Maintenance"), each = 3),
  Type = c("Direct", "Indirect", "Induced"),
  Jobs = c(82, 2571, 781, 127, 126, 131)
)

# plot those numbers as a dodged bar plot
ggplot(cc_1gw_jobs, aes(x = Type, y = Jobs, group = Category)) +
    geom_col(position = 'dodge', aes(fill = Category)) +
    scale_fill_manual(labels = c("Construction Jobs", "Operations & Maintenance Jobs"),
                      values = c("#4a4e69", "#9a8c98")) +
    labs(title = "Jobs per 1 GW OSW in the Central Coast",
     y = "FTE Jobs") +
    theme_minimal() +
    theme(
        axis.title.x = element_blank(),
        axis.title.y = element_text(size = 24, margin = margin(5,20,0,10)),
        axis.text = element_text(size = 20), 
        plot.title = element_text(size=28),
        legend.title = element_blank(),
        legend.text = element_text(size = 20),
        legend.position = "bottom",
        plot.background = element_rect(fill = "#EFEFEF"),
        panel.grid = element_line(color = "grey85")
    )
```

```{r}
# high ambition 2045 goal utility solar SB
pv_2045_high_sb <- pv_all %>% 
    filter(county == "SB" &
               technology == "Utility PV" &
               ambition =="High" &
               type == 'direct' &
               occupation %in% c('O&M', 'Construction'))

pv_2045_high_sb_plot <- ggplot(pv_2045_high_sb, aes(x = year, y = n_jobs, group = occupation)) +
    geom_col(aes(fill = occupation)) +
    scale_fill_manual(labels = c("Construction Jobs", "Operations & Maintenance Jobs"),
                      values = c("#4a4e69", "#9a8c98")) +
    scale_y_continuous(limits = c(0, 250)) +
    labs(title = "Projected direct jobs in Santa Barbara from Utility PV development",
     y = "FTE Jobs") +
    theme_minimal() +
    theme(
        axis.title.x = element_blank(),
        axis.title.y = element_text(size = 24, margin = margin(5,20,0,10)),
        axis.text = element_text(size = 20), 
        plot.title = element_text(size=28),
        legend.title = element_blank(),
        legend.text = element_text(size = 20),
        legend.position = "bottom",
        plot.background = element_rect(fill = "#EFEFEF"),
        panel.grid = element_line(color = "grey85")
    )

#ggsave('plots/pv_high_sb_advocacy.png', pv_2045_high_sb_plot, width = 12, height = 10)
```

```{r}
# low ambition 2045 goal utility solar SB
pv_2045_low_sb <- pv_all %>% 
    filter(county == "SB" &
               technology == "Utility PV" &
               ambition == "Low" &
               type == 'direct' &
               occupation %in% c('O&M', 'Construction'))

pv_2045_low_sb_plot <- ggplot(pv_2045_low_sb, aes(x = year, y = n_jobs, group = occupation)) +
    geom_col(aes(fill = occupation)) +
    scale_fill_manual(labels = c("Construction Jobs", "Operations & Maintenance Jobs"),
                      values = c("#4a4e69", "#9a8c98")) +
    scale_y_continuous(limits = c(0, 250)) +
    labs(title = "Projected direct jobs in Santa Barbara from Utility PV development",
     y = "FTE Jobs") +
    theme_minimal() +
    theme(
        axis.title.x = element_blank(),
        axis.title.y = element_text(size = 24, margin = margin(5,20,0,10)),
        axis.text = element_text(size = 20), 
        plot.title = element_text(size=28),
        legend.title = element_blank(),
        legend.text = element_text(size = 20),
        legend.position = "bottom",
        plot.background = element_rect(fill = "#EFEFEF"),
        panel.grid = element_line(color = "grey85")
    )

#ggsave('plots/pv_high_sb_advocacy.png', pv_2045_high_sb_plot, width = 12, height = 10)
```


```{r}
# high ambition 2045 goal utility solar Ventura
pv_2045_high_v <- pv_all %>% 
    filter(county == "V" &
               technology == "Utility PV" &
               ambition =="High" &
               type == 'direct' &
               occupation %in% c('O&M', 'Construction'))

pv_2045_high_v_plot <- ggplot(pv_2045_high_v, aes(x = year, y = n_jobs, group = occupation)) +
    geom_col(aes(fill = occupation)) +
    scale_fill_manual(labels = c("Construction Jobs", "Operations & Maintenance Jobs"),
                      values = c("#4a4e69", "#9a8c98")) +
    scale_y_continuous(limits = c(0, 20)) +
    labs(title = "Projected direct jobs in Ventura from Utility PV development",
     y = "FTE Jobs") +
    theme_minimal() +
    theme(
        axis.title.x = element_blank(),
        axis.title.y = element_text(size = 24, margin = margin(5,20,0,10)),
        axis.text = element_text(size = 20), 
        plot.title = element_text(size=28),
        legend.title = element_blank(),
        legend.text = element_text(size = 20),
        legend.position = "bottom",
        plot.background = element_rect(fill = "#EFEFEF"),
        panel.grid = element_line(color = "grey85")
    )

ggsave('plots/pv_high_v_advocacy.png', pv_2045_high_v_plot, width = 12, height = 10)
```

```{r}
# low ambition 2045 goal utility solar Ventura
pv_2045_low_v <- pv_all %>% 
    filter(county == "V" &
               technology == "Utility PV" &
               ambition == "Low" &
               type == 'direct' &
               occupation %in% c('O&M', 'Construction'))

pv_2045_low_v_plot <- ggplot(pv_2045_low_v, aes(x = year, y = n_jobs, group = occupation)) +
    geom_col(aes(fill = occupation)) +
    scale_fill_manual(labels = c("Construction Jobs", "Operations & Maintenance Jobs"),
                      values = c("#4a4e69", "#9a8c98")) +
    scale_y_continuous(limits = c(0, 20)) +
    labs(title = "Projected direct jobs in Ventura from Utility PV development",
     y = "FTE Jobs") +
    theme_minimal() +
    theme(
        axis.title.x = element_blank(),
        axis.title.y = element_text(size = 24, margin = margin(5,20,0,10)),
        axis.text = element_text(size = 20), 
        plot.title = element_text(size=28),
        legend.title = element_blank(),
        legend.text = element_text(size = 20),
        legend.position = "bottom",
        plot.background = element_rect(fill = "#EFEFEF"),
        panel.grid = element_line(color = "grey85")
    )

#ggsave('plots/pv_high_v_advocacy.png', pv_2045_high_v_plot, width = 12, height = 10)
```


```{r}
# high ambition 2045 goal utility solar SLO
pv_2045_high_slo <- pv_all %>% 
    filter(county == "SLO" &
               technology == "Utility PV" &
               ambition =="High" &
               type == 'direct' &
               occupation %in% c('O&M', 'Construction'))

pv_2045_high_slo_plot <- ggplot(pv_2045_high_slo, aes(x = year, y = n_jobs, group = occupation)) +
    geom_col(aes(fill = occupation)) +
    scale_fill_manual(labels = c("Construction Jobs", "Operations & Maintenance Jobs"),
                      values = c("#4a4e69", "#9a8c98")) +
    scale_y_continuous(limits = c(0, 4000)) +
    labs(title = "Projected direct jobs in San Luis Obispo from Utility PV development",
     y = "FTE Jobs") +
    theme_minimal() +
    theme(
        axis.title.x = element_blank(),
        axis.title.y = element_text(size = 24, margin = margin(5,20,0,10)),
        axis.text = element_text(size = 20), 
        plot.title = element_text(size=28),
        legend.title = element_blank(),
        legend.text = element_text(size = 20),
        legend.position = "bottom",
        plot.background = element_rect(fill = "#EFEFEF"),
        panel.grid = element_line(color = "grey85")
    )

#ggsave('plots/pv_high_slo_advocacy.png', pv_2045_high_slo_plot, width = 12, height = 10)
```

```{r}
# low ambition 2045 goal utility solar SLO
pv_2045_low_slo <- pv_all %>% 
    filter(county == "SLO" &
               technology == "Utility PV" &
               ambition == "Low" &
               type == 'direct' &
               occupation %in% c('O&M', 'Construction') &
               year %in% c(2025:2045))

pv_2045_low_slo_plot <- ggplot(pv_2045_low_slo, aes(x = year, y = n_jobs, group = occupation)) +
    geom_col(aes(fill = occupation)) +
    scale_fill_manual(labels = c("Construction Jobs", "Operations & Maintenance Jobs"),
                      values = c("#4a4e69", "#9a8c98")) +
    scale_y_continuous(limits = c(0, 4000)) +
    labs(title = "Projected direct jobs in San Luis Obispo from Utility PV development",
     y = "FTE Jobs") +
    theme_minimal() +
    theme(
        axis.title.x = element_blank(),
        axis.title.y = element_text(size = 24, margin = margin(5,20,0,10)),
        axis.text = element_text(size = 20), 
        plot.title = element_text(size=28),
        legend.title = element_blank(),
        legend.text = element_text(size = 20),
        legend.position = "bottom",
        plot.background = element_rect(fill = "#EFEFEF"),
        panel.grid = element_line(color = "grey85")
    )

#ggsave('plots/pv_high_advocacy.png', pv_2045_high_plot, width = 12, height = 10)
```
